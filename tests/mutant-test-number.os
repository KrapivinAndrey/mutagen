#Использовать asserts
#Использовать "../src"

Перем ЮнитТест;

Перем КодЦелоеЧисло;
Перем КодДесятичное;
Перем КодНоль;
Перем КодНольДесятичный;
Перем КодОтрицательное;
Перем КодОтрицательноеСдвиг;
Перем КодПроцедура;

Перем КодЦелоеЧислоНов;
Перем КодДесятичноеНов;
Перем КодНольНов;
Перем КодНольДесятичныйНов;
Перем КодОтрицательноеНов;
Перем КодОтрицательноеСдвигНов;
Перем КодПроцедураНов;


// Процедура выполняется перед запуском теста
//
Процедура ПередЗапускомТеста() Экспорт
	
	
КонецПроцедуры // ПередЗапускомТеста()

Функция МутацииДляТеста()

	Мутант = ЗагрузитьСценарий("src/Мутанты/ЗаменаЧисел.os");
	Мутации = Новый Массив;
	Мутации.Добавить(Мутант);

	Возврат Мутации;

КонецФункции

// Функция возвращает список тестов для выполнения
//
// Параметры:
//    Тестирование    - Тестер        - Объект Тестер (1testrunner)
//    
// Возвращаемое значение:
//    Массив        - Массив имен процедур-тестов
//    
Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	ЮнитТест = Тестирование;
	СписокТестов = Новый Массив;

	СписокТестов.Добавить("ТестДолжен_ПроверитьИдентификатор");

	СписокТестов.Добавить("ТестДолжен_СформироватьЦелоеЧисло");
	СписокТестов.Добавить("ТестДолжен_СформироватьДесятичное");
	СписокТестов.Добавить("ТестДолжен_СформироватьНоль");
	СписокТестов.Добавить("ТестДолжен_СформироватьНольДесятичный");
	СписокТестов.Добавить("ТестДолжен_СформироватьОтрицательное");
	СписокТестов.Добавить("ТестДолжен_СформироватьОтрицательноеСдвиг");
	СписокТестов.Добавить("ТестДолжен_СформироватьПараметрыПроцедуры");

	Возврат СписокТестов;

КонецФункции

Процедура ТестДолжен_ПроверитьИдентификатор() Экспорт

	Ожидаем.Что(МутацииДляТеста()[0].Мутант()).Равно("MagicNumbers");

КонецПроцедуры

Процедура ТестДолжен_СформироватьМутанта(ИсходныйКод, КонтрольноеЗначение)

	Мутации = МутацииДляТеста();
	Результат = Кодогенерация.ВыполнитьЗаменыВКоде(ИсходныйКод, Мутации);

	Ожидаем.Что(Результат.Количество(), "Должна быть одна мутация").Равно(1);
	Для Каждого ИмяКод Из Результат Цикл

		Ожидаем.Что(ИмяКод.Значение).Равно(КонтрольноеЗначение);

	КонецЦикла;

КонецПроцедуры

Процедура ТестДолжен_СформироватьЦелоеЧисло() Экспорт

	ТестДолжен_СформироватьМутанта(КодЦелоеЧисло, КодЦелоеЧислоНов);

КонецПроцедуры

Процедура ТестДолжен_СформироватьДесятичное() Экспорт

	ТестДолжен_СформироватьМутанта(КодДесятичное, КодДесятичноеНов);

КонецПроцедуры

Процедура ТестДолжен_СформироватьНоль() Экспорт

	ТестДолжен_СформироватьМутанта(КодНоль, КодНольНов);

КонецПроцедуры

Процедура ТестДолжен_СформироватьНольДесятичный() Экспорт

	ТестДолжен_СформироватьМутанта(КодНольДесятичный, КодНольДесятичныйНов);

КонецПроцедуры

Процедура ТестДолжен_СформироватьОтрицательное() Экспорт

	ТестДолжен_СформироватьМутанта(КодОтрицательное, КодОтрицательноеНов);

КонецПроцедуры

Процедура ТестДолжен_СформироватьОтрицательноеСдвиг() Экспорт

	ТестДолжен_СформироватьМутанта(КодОтрицательноеСдвиг, КодОтрицательноеСдвигНов);

КонецПроцедуры

Процедура ТестДолжен_СформироватьПараметрыПроцедуры() Экспорт

	ТестДолжен_СформироватьМутанта(КодПроцедура, КодПроцедураНов);

КонецПроцедуры



КодЦелоеЧисло = "Результат = а + 1;";
КодДесятичное = "Результат = а + 1.05;";
КодНоль = "Результат = а + 0;";
КодНольДесятичный = "Результат = а + 0.00;";
КодОтрицательное = "Результат = а - 10";
КодОтрицательноеСдвиг = "Результат = а - 5";
КодПроцедура = "Процедура Тест(а=1) Сообщить(а); КонецПроцедуры;";

КодЦелоеЧислоНов = "Результат = а + 6;";
КодДесятичноеНов = "Результат = а + 6.05;";
КодНольНов = "Результат = а + 5;";
КодНольДесятичныйНов = "Результат = а + 5;";
КодОтрицательноеНов = "Результат = а - 15";
КодОтрицательноеСдвигНов = "Результат = а - 10";
КодПроцедураНов = "Процедура Тест(а=6) Сообщить(а); КонецПроцедуры;";