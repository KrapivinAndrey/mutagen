#Использовать asserts
#Использовать "../src"

Перем ЮнитТест;

Перем КодСтрока;
Перем КодСтрокаНов;


// Процедура выполняется перед запуском теста
//
Процедура ПередЗапускомТеста() Экспорт
	
	Лог = ПараметрыПриложения.Лог();
	Лог.УстановитьУровень(УровниЛога.Отладка);

	Кодогенерация.ПодключитьМутантов();
	
КонецПроцедуры // ПередЗапускомТеста()

Функция МутацииДляТеста()

	Мутант = Новый ЗаменаСтрок();
	Мутации = Новый Массив;
	Мутации.Добавить(Мутант);

	Возврат Мутации;

КонецФункции

// Функция возвращает список тестов для выполнения
//
// Параметры:
//    Тестирование    - Тестер        - Объект Тестер (1testrunner)
//    
// Возвращаемое значение:
//    Массив        - Массив имен процедур-тестов
//    
Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	ЮнитТест = Тестирование;
	СписокТестов = Новый Массив;

	СписокТестов.Добавить("ТестДолжен_СформироватьСтроку");

	Возврат СписокТестов;

КонецФункции

Процедура ТестДолжен_СформироватьМутанта(ИсходныйКод, КонтрольноеЗначение)

	Мутации = МутацииДляТеста();
	Результат = Кодогенерация.ВыполнитьЗаменыВКоде(ИсходныйКод, Мутации);

	Ожидаем.Что(Результат.Количество(), "Должна быть одна мутация").Равно(1);
	Для Каждого ИмяКод Из Результат Цикл

		Ожидаем.Что(ИмяКод.Значение).Равно(КонтрольноеЗначение);

	КонецЦикла;

КонецПроцедуры

Процедура ТестДолжен_СформироватьСтроку() Экспорт

	ТестДолжен_СформироватьМутанта(КодСтрока, КодСтрокаНов);

КонецПроцедуры

КодСтрока = "Результат = ""Привет""";
КодСтрокаНов = "Результат = ""xxПриветxx""";
