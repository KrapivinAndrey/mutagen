#Использовать logos
#Использовать json
#Использовать fs
#Использовать tempfiles

Перем Лог;

Перем ФайлыИсходников;
Перем КомандаЗапуска;
Перем КаталогВыгрузки;
Перем Мутации;

Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Аргумент("CONFIG", "", "Файл конфигурации запуска")
		.ТСтрока()
		.ПоУмолчанию("./mutagen.json");

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ИнициализацияПараметров(Команда);


	Сообщить("Done");

КонецПроцедуры

Процедура ИнициализацияПараметров(Знач Команда)

	КонфигФайл = Команда.ЗначениеАргумента("CONFIG");

	Если НЕ ФС.ФайлСуществует(КонфигФайл) Тогда

		Лог.Ошибка("Не найден файл конфигурации запуска. Можете создать его командой mutagen config");
		ЗавершитьРаботу(1);

	КонецЕсли;
	
	Данные = ОбщегоНазначения.ПолучитьТекстИзФайла(КонфигФайл);
	_преобразовательJSON = Новый ПарсерJSON;
	Конфигурация = _преобразовательJSON.ПрочитатьJSON(Данные);

	ПрочитатьФайлыИсходников(Конфигурация);
	ПрочитатьКомандуЗапуска(Конфигурация);
	ПрочитатьКаталогВыгрузки(Конфигурация);
	ПрочитатьМутантов(Конфигурация);

	ЗапуститьГенерацию();

КонецПроцедуры

Процедура ЗапуститьГенерацию()

	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();

	МоиВременныеФайлы = Новый МенеджерВременныхФайлов();

	Для Каждого Исходник Из ФайлыИсходников Цикл

		Лог.Информация("Генерация мутаций для файла " + Исходник.Имя);

		ИсходныйКод = ОбщегоНазначения.ПолучитьТекстИзФайла(Исходник.ПолноеИмя);

		НовыеИсходники = Кодогенерация.ВыполнитьЗаменыВКоде(ИсходныйКод, Мутации);
		Лог.Отладка("Новых исходников " + НовыеИсходники.Количество());

		Для Каждого ИмяКод Из НовыеИсходники Цикл

			КаталогДляЗапуска = МоиВременныеФайлы.СоздатьКаталог();
			ФС.КопироватьСодержимоеКаталога(ТекущийКаталог(), КаталогДляЗапуска);

		КонецЦикла;
		
		МоиВременныеФайлы.Удалить();

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьФайлыИсходников(КонфигурацияЗапуска)

	Если КонфигурацияЗапуска["src"] = Неопределено
			ИЛИ НЕ ФС.КаталогСуществует(КонфигурацияЗапуска["src"]) Тогда

		Лог.Ошибка("Некорректно указан каталог исходников для генерации мутаций");
		ЗавершитьРаботу(1);

	КонецЕсли;

	ФайлыИсходников = НайтиФайлы(КонфигурацияЗапуска["src"], "*.os", Истина);

	Если ФайлыИсходников.Количество() = 0 Тогда

		Лог.Ошибка("Не найдены файлы для генерации мутаций в каталоге исходников");
		ЗавершитьРаботу(1);

	КонецЕсли;

	Лог.Отладка("Найдено файлов для генерации: " + ФайлыИсходников.Количество());

КонецПроцедуры

Процедура ПрочитатьКомандуЗапуска(КонфигурацияЗапуска)

	КомандаЗапуска = ФС.ОтносительныйПуть(ТекущийКаталог(), КонфигурацияЗапуска["task"]);
	Если КомандаЗапуска = Неопределено 
			ИЛИ Не ФС.ФайлСуществует(КомандаЗапуска) Тогда

		Лог.Ошибка("Не указан файл для запуска тестов");
		ЗавершитьРаботу(1);

	КонецЕсли;

	Лог.Отладка("Команда запуска тестов: " + КомандаЗапуска);

КонецПроцедуры

Процедура ПрочитатьКаталогВыгрузки(КонфигурацияЗапуска)

	КаталогВыгрузки = ФС.ПолныйПуть(КонфигурацияЗапуска["survivors"]);
	Если КаталогВыгрузки = Неопределено Тогда 

		Лог.Ошибка("Не указан каталог для сохранения выживших");
		ЗавершитьРаботу(1);

	КонецЕсли;

	Лог.Отладка("Создаю/очищаю каталог выгрузки " + КаталогВыгрузки);
	ФС.ОбеспечитьПустойКаталог(КаталогВыгрузки);
	УдалитьФайлы(КаталогВыгрузки, "*.os");
	УдалитьФайлы(КаталогВыгрузки, "*.bls"); // Это конечно не os, но на всякий случай удалим

КонецПроцедуры

Процедура ПрочитатьМутантов(КонфигурацияЗапуска)

	Пропуск = ФС.ПолныйПуть(КонфигурацияЗапуска["skip"]);
	ИсключаемыеМутации = Новый Массив;
	Если ЗначениеЗаполнено(Пропуск) Тогда

		ИсключаемыеМутации = СтрРазделить(Пропуск, ",");

	КонецЕсли;

	Мутации = Новый Массив;
	Для Каждого Мутация Из ОбщегоНазначения.ДоступныеМутанты() Цикл

		Если ИсключаемыеМутации.Найти(Мутация.Идентификатор) <> Неопределено Тогда

			Лог.Информация("Исключена мутация: " + Мутация.Идентификатор);
			Продолжить;
		
		КонецЕсли;

		Мутации.Добавить(Вычислить("Новый " + Мутация.Класс));

	КонецЦикла;

	Если Мутации.Количество() = 0 Тогда

		Лог.Ошибка("Не осталось мутаций для применения");
		ЗавершитьРаботу(1);

	КонецЕсли;

КонецПроцедуры


Лог = ПараметрыПриложения.Лог();