#Использовать logos
#Использовать osparser

Перем Лог;

Перем Исходники;
Перем КаталогВыгрузки;
Перем Мутации;

Перем Парсер;

Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Аргумент("SRC", "", "Путь к файлу исходников. Например: module.bsl")
		.ТСтрока()
		.ВОкружении("MUTANT_SRC");

	Команда.Аргумент("OUTPUT", "", "Каталог для хранения результатов")
		.ТСтрока()
		.ВОкружении("MUTANT_RESULT");

	Команда.Опция("skip", "", "Пропуск мутаций. Необходимо указать ИДЕНТИФИКАТОР через запятую").ТСтрока();

	Команда.Опция("v verbose", Ложь, "Режим отладки")
		.ТБулево()
		.СкрытьВСправке();

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	ИнициализацияПараметров(Команда);
	
	ЧтениеТекста = Новый ЧтениеТекста(Исходники, КодировкаТекста.UTF8);
	ИсходныйКод = ЧтениеТекста.Прочитать();

	Парсер.Пуск(ИсходныйКод, Мутации);

	Если Парсер.ТаблицаЗамен().Количество() = 0 Тогда

		Сообщить("Не удалось создать мутантов");
		ЗавершитьРаботу(0);

	Иначе

		СоздатьФайлыСМутантами(Парсер.ТаблицаЗамен());

	КонецЕсли;

КонецПроцедуры

Процедура ИнициализацияПараметров(Знач Команда)

	Если Команда.ЗначениеОпции("verbose") Тогда

		Лог.УстановитьУровень(УровниЛога.Отладка);

	КонецЕсли;

	Исходники = Команда.ЗначениеАргумента("SRC");
	Лог.Отладка("Исходники для мутаций: " + Исходники);

	Если Не ОбщегоНазначения.ФайлСуществует(Исходники) Тогда

		Лог.Ошибка(СтрШаблон("Нет файла исходников <%1>", Исходники));
		ЗавершитьРаботу(1);

	КонецЕсли;

	КаталогВыгрузки = Команда.ЗначениеАргумента("OUTPUT");
	Лог.Отладка("Каталог для сохранения результатов: " + КаталогВыгрузки);

	Если Не ОбщегоНазначения.КаталогСуществует(КаталогВыгрузки) Тогда

		СоздатьКаталог(ОбщегоНазначения.АбсолютныйПуть(КаталогВыгрузки));

	КонецЕсли;

	Искл = Команда.ЗначениеОпции("skip");
	ИсключаемыеМутации = СтрРазделить(Искл, ",");

	Мутации = Новый Массив;
	Для Каждого Мутация Из ОбщегоНазначения.ДоступныеМутанты() Цикл

		Если ИсключаемыеМутации.Найти(Мутация.Идентификатор) <> Неопределено Тогда

			Лог.Информация("Исключена мутация: " + Мутация.Идентификатор);
			Продолжить;
		
		КонецЕсли;

		Мутации.Добавить(Вычислить("Новый " + Мутация.Класс));

	КонецЦикла;

	Если Мутации.Количество() = 0 Тогда

		Лог.Ошибка("Не осталось мутаций для применения");
		ЗавершитьРаботу(1);

	КонецЕсли;

КонецПроцедуры

Процедура СоздатьФайлыСМутантами(ТаблицаЗамен)

	Для Каждого Замена из ТаблицаЗамен Цикл

		Исходник = Парсер.Исходник(); 
	
		ПерваяЧасть = Сред(Исходник, 0, Замена.Позиция-1);
		ТекстЗамены = Замена.Текст;
		ВтораяЧасть = Сред(Исходник, Замена.Позиция + Замена.Длина);
	
		Результат = Новый Массив();
		Результат.Добавить(ПерваяЧасть);
		Результат.Добавить(ТекстЗамены);
		Результат.Добавить(ВтораяЧасть);
	
		НовыйИсходник = СтрСоединить(Результат);
		Имя = ХешКода(НовыйИсходник);

		ЗаписьТекста = Новый ЗаписьТекста(КаталогВыгрузки + Имя + ".bsl"
											, КодировкаТекста.UTF8);

		ЗаписьТекста.Записать(НовыйИсходник);

		ЗаписьТекста.Закрыть();
	
	КонецЦикла;
	
КонецПроцедуры

Функция ХешКода(Код)

	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(Код);

	Возврат СтрЗаменить(Строка(Хеш.ХешСумма), " ", "");

КонецФункции

Лог = ПараметрыПриложения.Лог();
Парсер = Новый ПарсерВстроенногоЯзыка;